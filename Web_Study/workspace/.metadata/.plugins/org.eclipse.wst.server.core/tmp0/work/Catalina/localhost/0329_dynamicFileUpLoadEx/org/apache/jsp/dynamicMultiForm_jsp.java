/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.41
 * Generated at: 2022-03-29 07:43:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class dynamicMultiForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>dynamicMultiForm.jsp 페이지</title>\r\n");
      out.write("<script>\r\n");
      out.write("\tvar count = 1;\t//전역 변수\r\n");
      out.write("\t\r\n");
      out.write("\tfunction addRow() {\r\n");
      out.write("\t\tvar dynamicTable = document.getElementById('dynamic_table');\r\n");
      out.write("\t\tvar newRow = dynamicTable.insertRow();\r\n");
      out.write("\t\tvar cell1 = newRow.insertCell();\r\n");
      out.write("\t\tvar cell2 = newRow.insertCell();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tcell1.innerHTML = '<input type=\"checkbox\" name=\"checkboxObj\" />';\r\n");
      out.write("\t\tcell2.innerHTML = '<input type=\"file\" name=\"fileUpload'+count+'\" size=\"70\" onchange=\"checkSize(this)\"/>'; \r\n");
      out.write("\t\tcount++;\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction checkSize(input) {\r\n");
      out.write("\t\tif(input.files && input.files[0].size > (20 * 1024 * 1024)) {\r\n");
      out.write("\t\t\twindow.alert(\"파일 사이즈가 20MB를 넘습니다!!\")\r\n");
      out.write("\t\t\tinput.value = null;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction deleteRow() {\r\n");
      out.write("\t\tvar table = document.getElementById('dynamic_table');\r\n");
      out.write("\t\tvar checkboxArray = document.getElementsByName('checkboxObj');\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//고민???????\r\n");
      out.write("\t\tfor(var i=checkboxArray.length-1; i>=0; i--) {\r\n");
      out.write("\t\t\tvar check = checkboxArray[i].checked;  //check 변수는 boolean 변수이다.\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif(check) {\r\n");
      out.write("\t\t\t\ttable.deleteRow(i);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\t\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h2>동적 다중 파일 업로드 하기</h2>\r\n");
      out.write("\t<form name=\"dynamicForm\" method=\"POST\" \r\n");
      out.write("\t      enctype=\"multipart/form-data\" action=\"register.jsp\">\r\n");
      out.write("\t   <table border=\"1\" cellpadding=\"0\" cellspacing=\"0\">\r\n");
      out.write("\t   \t\t<tr>\r\n");
      out.write("\t   \t\t\t<td>작성자</td>\r\n");
      out.write("\t   \t\t\t<td><input type=\"text\" name=\"name\"/></td>\r\n");
      out.write("\t   \t\t</tr>\r\n");
      out.write("\t   \t\t<tr>\r\n");
      out.write("\t   \t\t\t<td>제   목</td>\r\n");
      out.write("\t   \t\t\t<td><input type=\"text\" name=\"subject\"/></td>\r\n");
      out.write("\t   \t\t</tr>\r\n");
      out.write("\t   </table> \r\n");
      out.write("\t   <br>\r\n");
      out.write("\t   <input type=\"button\" value=\"행추가\" onClick=\"addRow();\"/>&nbsp;&nbsp;&nbsp;\r\n");
      out.write("\t   <input type=\"button\" value=\"행삭제\" onClick=\"deleteRow();\"/>\r\n");
      out.write("\t   <br><br>\r\n");
      out.write("\t   Check &nbsp;&nbsp;&nbsp;&nbsp;업로드할 파일 이름 \r\n");
      out.write("\t   <table id=\"dynamic_table\" border=\"1\" cellpadding=\"0\" \r\n");
      out.write("\t          cellspacing=\"0\"></table>\r\n");
      out.write("\t     <h4><font color=\"red\">업로드할 파일은 최대 20MB 까지 업로드 가능합니다!!</font></h4>  \r\n");
      out.write("\t     <input type=\"submit\" value=\"파일 올리기\" />   \r\n");
      out.write("\t</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
